options:
  docker: true
  size: 2x

definitions:
  services:
    docker:
      memory: 4096
    redis:
      image: redis
  caches:
    nodemodules: ./node_modules
  scripts:
    - script:
        - &skip-bitbucket-authored-commits '[[ $(git log -1 --pretty=%an) == "bitbucket-pipelines" ]] && echo "Commit author is bitbucket-pipelines - exiting Pipeline" && exit 0'
    - script: &docker-push-to-aws
        - pip3 install -U awscli

        - export BRANCH_TAG=$([[ ! -z "$BITBUCKET_BRANCH" ]] && echo "$BITBUCKET_BRANCH" | sed -E 's/([^0-9a-zA-Z]+)/-/g' | awk '{print tolower($0)}' || echo "master")
        - export REPO=$DOCKER_REPO_URL/kidsloop-live-backend # DOCKER_REPO_URL is workspace wide variable
        - export COMMIT_TAG=$(echo $BITBUCKET_COMMIT | cut -c1-7)
        - printf '"Git tag":"%s", "Git branch":"%s", "Git commit":"%s" "ECR repo":"%s"' $BITBUCKET_TAG $BRANCH_TAG $COMMIT_TAG $REPO
        - aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin $DOCKER_REPO_URL
        - export MAJOR_VERSION=$(echo $BITBUCKET_TAG | grep -o "[v][0-9]")
        - export MINOR_VERSION=$(echo $BITBUCKET_TAG | grep -o "[v][0-9].[0-9]")
        - export PATCH_VERSION=$(echo $BITBUCKET_TAG | grep -o "[v][0-9].[0-9].[0-9]")
        - echo "$MAJOR_VERSION, $MINOR_VERSION, $PATCH_VERSION"

        # - mv deploy/Dockerfile.bitbucket-pipeline .
        - docker build -t live-backend -f Dockerfile .
        - docker tag live-backend:latest $REPO:$MAJOR_VERSION
        - docker tag live-backend:latest $REPO:$MINOR_VERSION
        - docker tag live-backend:latest $REPO:$BITBUCKET_TAG
        - docker tag live-backend:latest $REPO:$BRANCH_TAG
        - docker tag live-backend:latest $REPO:$BRANCH_TAG-latest
        - docker tag live-backend:latest $REPO:$BRANCH_TAG-$BITBUCKET_BUILD_NUMBER
        - docker tag live-backend:latest $REPO:$BRANCH_TAG-$COMMIT_TAG
        - docker tag live-backend:latest $REPO:alpha-latest

        - docker push $REPO:$MAJOR_VERSION
        - docker push $REPO:$MINOR_VERSION
        - docker push $REPO:$BITBUCKET_TAG
        - docker push $REPO:$BRANCH_TAG
        - docker push $REPO:$BRANCH_TAG-latest
        - docker push $REPO:$BRANCH_TAG-$BITBUCKET_BUILD_NUMBER
        - docker push $REPO:$BRANCH_TAG-$COMMIT_TAG
        - docker push $REPO:alpha-latest
      services:
        - docker
      caches:
        - docker

  steps:
    - step: &npm-install-and-test
        name: "⚡ npm install and test"
        image: node:16
        services:
          - redis
        script:
          - *skip-bitbucket-authored-commits
          - export HUSKY=0
          - npm i
          # - npm run test:unit
        caches:
          - nodemodules
        artifacts:
          - node_modules/**

    - step: &npm-build
        name: "⚡ npm build"
        image: node:16
        script:
          - *skip-bitbucket-authored-commits
          - npm run build
        artifacts:
          - dist/**

    - step: &version-release
        name: "🏷️ Release Version Bump"
        image: node:16
        caches:
          - nodemodules
        script:
          - *skip-bitbucket-authored-commits
          - if [[ $BITBUCKET_BRANCH != master ]] && [[ $BITBUCKET_BRANCH != alpha ]]; then echo "This can only be performed on master branch" && exit 1; fi

          - npm run release
          - export VERSION_TAG=$(git describe --tags)
          - 'echo "New release version: $VERSION_TAG - $(git log -1 --pretty=%h%B)"'
          - export TAG_EXISTS=$(git ls-remote origin refs/tags/$VERSION_TAG)
          - '[[ ! -z "$TAG_EXISTS" ]] && echo "$VERSION_TAG already exists" && exit 1'
          # - '[[ ! -z "$TAG_EXISTS" ]] && echo "Delete remote tag $VERSION_TAG" && git push --delete origin "$VERSION_TAG"'
          - git push origin master
          - git push origin --tags

    - step: &npm-install-and-build
        name: "⚡ npm install and build"
        image: node:16-alpine
        script:
          - npm i
          - npm run build
          - npm prune --production
        caches:
          - nodemodules
        artifacts:
          - node_modules/**
          - dist/**

    # This step will deploy an image to the new "landing zone" environment via ArgoCD.
    # See here for the equivalent Github Actions pipeline: https://github.com/KL-Engineering/user-service/pull/27
    - step: &step-deploy-landing-zone
        name: "Deploy built image to the Kidsloop landing zone"
        image: argoproj/argocd:v2.3.1
        script:
          # What are we deploying?
          - export BRANCH_TAG=$([[ ! -z "$BITBUCKET_BRANCH" ]] && echo "$BITBUCKET_BRANCH" | sed -E 's/([^0-9a-zA-Z]+)/-/g' | awk '{print tolower($0)}' || echo "master")
          - export COMMIT_TAG=$(echo $BITBUCKET_COMMIT | cut -c1-7)
          - export DEPLOY_TAG=$(if [[ ! -z "$BITBUCKET_TAG" ]]; then echo $BITBUCKET_TAG; else echo "$BRANCH_TAG-$COMMIT_TAG"; fi)
          - echo "Tag to deploy - $DEPLOY_TAG"

          # Set up port forwarding
          - echo $TOOLS_KUBECONFIG_CONTENT_B64 | base64 -d > $BITBUCKET_CLONE_DIR/kubeconfig.yml
          - >
            PORTFORWARD_CONTAINER=$(
            docker run
            --volume $BITBUCKET_CLONE_DIR/kubeconfig.yml:/mnt/kubeconfig.yml
            --env KUBECONFIG=/mnt/kubeconfig.yml
            --publish 8080:8080
            --hostname kubeproxy
            --detach bitnami/kubectl:1.21
            port-forward -n argocd svc/argocd-server
            --address 0.0.0.0 8080:80
            )
          - sleep 5
          # Deploy tag to environment with ArgoCD
          - >
            export
            ARGOCD_SERVER=localhost:8080
            ARGOCD_APP=uk-landingzone-live-backend
            ARGOCD_APP_CHART_TAG_PATH=liveBackend.tag
            ARGOCD_OPTS='--grpc-web --insecure --plaintext'
          - >
            argocd login $ARGOCD_SERVER
            --username $ARGOCD_AUTH_USERNAME
            --password $ARGOCD_AUTH_PASSWORD
            $ARGOCD_OPTS
          - argocd app get $ARGOCD_APP
          - argocd app set $ARGOCD_APP -p $ARGOCD_APP_CHART_TAG_PATH=$DEPLOY_TAG
          - argocd app sync $ARGOCD_APP --timeout 300

          # Clean up tasks
          - docker logs $PORTFORWARD_CONTAINER
          - docker kill $PORTFORWARD_CONTAINER
          - docker rm $PORTFORWARD_CONTAINER
        services:
          - docker
        caches:
          - docker

pipelines:
  pull-requests:
    "**": # This runs as default for any branch not elsewhere defined.:
      - step: *npm-install-and-test
      - step: *npm-build
      # - step: *docker-build-and-run

  branches:
    master:
      - step: *npm-install-and-test
      - step: *npm-build
      - step: *version-release

  tags:
    "*":
      - step: *npm-install-and-build
      - step:
          name: "🚀 Docker build + push to ECR"
          image: python:3.9-alpine
          services:
            - docker
          script: *docker-push-to-aws
      - step: &step-deploy-alpha
          name: Deploy to alpha
          deployment: alpha-dev
          image: python:3.9-alpine
          script:
            - pip3 install -U awscli
            - AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY_ALPHA_OLD" AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID_ALPHA_OLD" aws ecs update-service --service arn:aws:ecs:ap-northeast-2:871601235178:service/kidsloop-alpha/kidsloop-alpha-live-graphql --force-new-deployment --cluster kidsloop-alpha --region ap-northeast-2
      - step: *step-deploy-landing-zone

  custom:
    deploy-alpha:
      - step: *npm-install-and-build
      - step:
          name: "🚀 Docker build for alpha + push to ECR"
          image: python:3.9-alpine
          services:
            - docker
          script:
            - pip3 install -U awscli
            - export BRANCH_TAG=$([[ ! -z "$BITBUCKET_BRANCH" ]] && echo "$BITBUCKET_BRANCH" | sed -E 's/([^0-9a-zA-Z]+)/-/g' | awk '{print tolower($0)}' || echo "master")
            - export REPO=$DOCKER_REPO_URL/kidsloop-live-backend # DOCKER_REPO_URL is workspace wide variable
            - export COMMIT_TAG=$(echo $BITBUCKET_COMMIT | cut -c1-7)
            - printf '"Git tag":"%s", "Git branch":"%s", "Git commit":"%s" "ECR repo":"%s"' $BITBUCKET_TAG $BRANCH_TAG $COMMIT_TAG $REPO
            - aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin $DOCKER_REPO_URL

            - docker build -t live-backend -f Dockerfile .
            - docker tag live-backend:latest $REPO:alpha-$COMMIT_TAG
            - docker tag live-backend:latest $REPO:alpha-latest

            - docker push $REPO:alpha-$COMMIT_TAG
            - docker push $REPO:alpha-latest
      - step: *step-deploy-alpha
