# syntax=docker/dockerfile:experimental
FROM node:16-alpine
# Inputs
ARG node_env
ARG exposed_port
ARG npm_private_repo_token
ARG redis_host
ARG redis_port

# local env settings
ENV AUTH_TOKEN_PRIVATE_REGISTRY=$npm_private_repo_token
ENV NODE_ENV=$node_env
ENV PORT=$exposed_port
ENV REDIS_HOST=$redis_host
ENV REDIS_PORT=$redis_port
EXPOSE $exposed_port

# Root folder
WORKDIR /usr/app

# cache and install dependencies
# RUN npm install npm@latest -g && \
#     npm cache clean --force && \
#     touch .npmrc && \
#     echo "@kl-engineering:registry=https://npm.pkg.github.com" >> .npmrc && \
#     echo "//npm.pkg.github.com/:_authToken=${AUTH_TOKEN_PRIVATE_REGISTRY}" >> .npmrc && \
#     echo "@kl-engineering:always-auth=true" >> .npmrc && \
#     cat .npmrc && \
#     npm c ls -l && \
#     npm info @kl-engineering\/kidsloop-token-validation
RUN npm config set @kl-engineering:registry https://npm.pkg.github.com \
      && npm config set '//npm.pkg.github.com/:_authToken' ${AUTH_TOKEN_PRIVATE_REGISTRY}

RUN npm c ls -l
RUN npm info @kl-engineering\/kidsloop-token-validation

COPY ["package.json", "package-lock.json", ".eslint*", "tsconfig*", "./"]
RUN npm ci --ignore-scripts

# quality checks
ADD ["./src/", "./src"]
ADD ["./tests/", "./tests"]
ADD ["./types/", "./types"]
RUN npm run lint

# cleanup
# RUN ["/bin/bash", "-c", "find . ! -name dist ! -name node_modules -maxdepth 1 -mindepth 1 -exec rm -rf {} \\;"]
# ENTRYPOINT ["node", "/root/node_modules/.bin/http-server" , "./dist/"]
# ENTRYPOINT [ "/bin/sh" ]
CMD ["npm", "run", "test"]